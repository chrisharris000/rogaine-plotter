import math
from pathlib import Path
import string

import pandas as pd

from utils import CONTROL_COORDINATES

class Reader:
    """
    Import results of rogaine event from original txt files or from csv generated by this program
    """
    def __init__(self, config: dict):
        self.config = config

    def parse_txt_results_directory(self) -> dict:
        """
        Parse the original txt files of results into a dictionary of team_number:team_result
        """
        results = {}

        file_pattern = "*_*.txt"
        for filepath in Path(self.config["results_directory"]).glob(file_pattern):
            filename = filepath.name
            team_number = filename.split("_")[0]
            if team_number not in results.keys():
                results[team_number] = self._parse_txt_result(filepath)

        return results

    def _parse_txt_result(self, filepath: Path) -> pd.DataFrame:
        """
        Parse an individual txt result file and return a pandas dataframe
        """
        result = pd.DataFrame(columns = ["control",
                                         "cumulative_points",
                                         "time_split",
                                         "distance_travelled"])

        for line_num, line in enumerate(open(filepath)):
            # ignore first 3 lines, only descriptive info about file
            if line_num < 3:
                continue

            # ignore line starting with No and Distance and newline:
            if line.startswith("No") or line.startswith("Distance") or line == "\n":
                continue

            if line.lstrip().startswith("Late Penalty"):
                original_points = result.loc[len(result) - 1, "cumulative_points"]
                deduction = int(line.split()[-1])
                final_total = original_points + deduction
                control, cumulative_points, time_split = "HH", final_total, "00:00:00"

            else:
                # extract relevant fields
                _no, control, _time, _dist, _cm_dist, cumulative_points, time_split, *_other_fields = line.lstrip().split()

            # pad time with zero hours if necessary
            if time_split.count(":") == 1:
                time_split = "00:" + time_split

            # calculate distance travelled
            prev_control = ""
            if len(result) == 0:
                prev_control = "HH"
            else:
                prev_entry = result.loc[len(result) - 1]
                prev_control = prev_entry["control"]

            distance_travelled = self.calculate_distance_between_controls(prev_control, control)

            entry = [control, int(float(cumulative_points)), pd.Timedelta(time_split), distance_travelled]
            result.loc[len(result)] = entry

        return result

    def parse_csv_results_directory(self) -> dict:
        """
        Parse the results from csv files generated by this class and return a dictionary of
        team_number:result
        """
        pass

    def _parser_csv_result(self) -> pd.DataFrame:
        """
        Parse an individual csv result and return a pandas dataframe
        """
        pass

    def write_csv_results(self) -> None:
        """
        Write the results dataframes as csv files
        """
        pass

    def calculate_distance_between_controls(self, prev_control: str, curr_control: str) -> float:
        """
        Calculate the distance in km between the previous control and the current control
        """
        prev_control_coords = CONTROL_COORDINATES[prev_control]
        curr_control_coords = CONTROL_COORDINATES[curr_control]
        dx = prev_control_coords.x - curr_control_coords.x
        dy = prev_control_coords.y - curr_control_coords.y
        dist_pixels = math.sqrt(dx**2 + dy**2)

        # convert to km
        scale_str = self.config["map_scale_pixels"].split(":")
        ratio = int(scale_str[0]) / int(scale_str[1])
        dist_km = (dist_pixels / ratio) / 1000
        
        return dist_km
